@using AutomatedRealms.DataImportUtility.Abstractions.Models
@using AutomatedRealms.DataImportUtility.Components.FieldMappingComponents.FieldTransformationComponents
@using AutomatedRealms.DataImportUtility.Core.Rules

@inherits FileImportUtilityComponentBase

@code {
    public virtual RenderFragment Render =>
        @<text>
            <table class="@DefaultCssClass"
                    data-from-component="@nameof(FieldMapperEditor)"
                    data-component-instance="@InstanceId"
                    data-mapper-state="@MapperStateId">
                <thead>
                    @TableHeaderContent
                </thead>
                <tbody>
                    @foreach (var curField in _editFieldMappings)
                    {
                        @ItemContentTemplate(curField)
                    }
                </tbody>
            </table>

            @if (_showConfigureTransform && _editFieldTransformOptions is not null)
            {
                <div class="value-config-wrapper@(DefaultCssClass)"
                     data-from-component="@nameof(FieldMapperEditor)"
                     data-component-instance="@InstanceId"
                     data-mapper-state="@MapperStateId">
                    <FieldTransformationConfiguration @bind-Show=_showConfigureTransform
                                                      FieldMapping=_editFieldTransformOptions.FieldMapping
                                                      @bind-FieldTransformation=_editFieldTransformOptions.FieldTransform
                                                      @bind-FieldTransformation:after="() => NotifyFieldMappingChanged(_editFieldTransformOptions.FieldMapping)"
                                                      FieldDescriptors=FieldDescriptors
                                                      ApplyDefaultCss=ApplyDefaultCss />
                </div>
            }
        </text>;

    protected virtual RenderFragment TableHeaderContent =>
        @<tr>
            <th>
                Destination
            </th>
            <th>
                Mapping Type
            </th>
            <th>
                Source
            </th>
        </tr>;

    protected virtual RenderFragment ItemContentTemplate(FieldMapping curField) => 
        builder => 
        { 
            var curMappingRule = curField.MappingRule ?? new IgnoreRule(); 
            var thisField = curField; 
            
            builder.AddContent(0, InternalItemContentTemplate(thisField, curMappingRule));
        };

    private RenderFragment InternalItemContentTemplate(FieldMapping curField, MappingRuleBase curMappingRule) =>
        @<tr>
            <td>
                <div class="field-info-wrapper">
                    <div class="field-name-wrapper">
                        <span class="field-name">@curField.FieldName</span>
                        @if (curField.Required)
                        {
                            <span class="required-field">*</span>
                        }
                    </div>
                    @if (curField.HasValidationErrors)
                    {
                        var message = curField.Required && (curField.MappingRule is null || curField.MappingRule.SourceFieldTransformations.Count(x => !string.IsNullOrWhiteSpace(x.Field?.FieldName)) == 0)
                            // Special case for required, but no field selected
                            ? "This field requires a source value."
                            : curField.MappingRule switch
                            {
                                ConstantValueRule cvr => curField.GetValidationErrors(cvr.RuleDetail ?? "<null>").First().ErrorMessage,
                                _ => "The output value for one or more of the source fields is not valid for this field."
                            };
                        <span title="@message">@Icons.Caution()</span>
                    }
                </div>
            </td>
            <td>
                <div class="mapping-rule-picker-wrapper">
                    <select class="@DefaultCssClass"
                            @onchange="e => HandleMappingRuleChanged(e, curField)">
                        @foreach (var curMapType in ApplicationConstants.MappingRuleTypes)
                        {
                            <option value="@curMapType" selected="@(curField.MappingRuleType == curMapType)">@curMapType.GetDisplayText()</option>
                        }
                    </select>
                    @if (curField.MappingRuleType == MappingRuleType.CombineFieldsRule)
                    {
                        <fieldset class="rule-detail">
                            <legend>
                                <label for="@($"input_{curField.FieldName}-{InstanceId}")"
                                       title="The rule detail is an interpolation string using the placeholders ${0}, ${1}, etc. to indicate the source fields in the order they are added.">
                                    <span>Rule Detail</span>
                                    @Icons.InfoIcon()
                                </label>
                            </legend>
                            <input id="@($"input_{curField.FieldName}-{InstanceId}")"
                                   type="text"
                                   class="@DefaultCssClass"
                                   @bind=curMappingRule.RuleDetail
                                   @bind:event="oninput"
                                   @bind:after=@(() => NotifyFieldMappingChanged(curField))>
                        </fieldset>
                    }
                </div>
            </td>
            <td>
                @switch (curField.MappingRuleType)
                {
                    case MappingRuleType.CopyRule:
                        {
                            var sourceFieldTransform = curMappingRule.SourceFieldTransformations.FirstOrDefault();
                            @RenderFieldPicker(curField, sourceFieldTransform)
                        }
                        break;
                    case MappingRuleType.CombineFieldsRule:
                        {
                            <div class="combine-fields-wrapper">
                                @foreach (var sourceFieldTransform in curMappingRule.SourceFieldTransformations)
                                {
                                    <div class="combined-field">
                                        @RenderFieldPicker(curField, sourceFieldTransform)
                                        @if (curMappingRule.SourceFieldTransformations.Count > 1)
                                        {
                                            <button type="button"
                                                    class="o1l-btn-remove o1l-btn-sm@(DefaultCssClass)"
                                                    title="Remove this source field"
                                                    @onclick="_ => HandleRemoveSourceFieldTransformClicked(curField, sourceFieldTransform)">
                                                <span>-</span>
                                            </button>
                                        }
                                    </div>
                                }

                                @if (curMappingRule.SourceFieldTransformations.Count == 0)
                                {
                                    <div class="combined-field">
                                        @RenderFieldPicker(curField, null)
                                    </div>
                                }

                                <button type="button"
                                        class="o1l-btn-add o1l-btn-sm@(DefaultCssClass)"
                                        title="Add a new source field" 
                                        @onclick="_ => HandleAddSourceFieldTransformClicked(curField)">
                                    <span>+</span>
                                </button>
                            </div>
                        }
                        break;
                    case MappingRuleType.ConstantValueRule:
                        {
                            curField.MappingRule ??= new ConstantValueRule();
                            var mappingRule = curField.MappingRule as ConstantValueRule;
                            <input type="text" @bind=@curField.MappingRule.RuleDetail @bind:event="oninput" @bind:after="() => NotifyFieldMappingChanged(curField)"  />
                        }
                        break;
                    case MappingRuleType.CustomFieldlessRule:
                        {
                            <div class="custom-rule-wrapper">
                                <button type="button"
                                        class="o1l-btn-default@(DefaultCssClass)"
                                        title="Add a new source field"
                                        @onclick="_ => HandleConfigureCustomClicked(curField)">
                                    Configure...
                                </button>
                            </div>
                        }
                        break;
                }
            </td>
        </tr>;

    protected virtual RenderFragment RenderFieldPicker(FieldMapping curField, FieldTransformation? sourceFieldTransform = null) => 
        @<div>
            <select class="@DefaultCssClass" @onchange="e => HandleSelectedFieldChanged(e, curField, sourceFieldTransform)">
                <option value="" selected="@(string.IsNullOrWhiteSpace(sourceFieldTransform?.Field?.FieldName))">--Select a field--</option>
                @foreach (var importedField in FieldDescriptors)
                {
                    <option value="@importedField.FieldName" selected="@(sourceFieldTransform?.Field?.FieldName == importedField.FieldName)">@importedField.FieldName</option>
                }
            </select>
            @if (sourceFieldTransform is not null)
            {
                <button type="button" 
                        class="o1l-btn-edit o1l-btn-sm@(DefaultCssClass)"
                        title="Edit the transformations for this field"
                        @onclick="_ => HandleEditTransformClicked(curField, sourceFieldTransform)">
                    @Icons.Edit()
                </button>
            }
        </div>;
}