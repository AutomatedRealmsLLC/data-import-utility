@using DataImportUtility.Components.FieldMappingComponents.FieldTransformationComponents
@using DataImportUtility.Models
@using DataImportUtility.Rules

@inherits FileImportUtilityComponentBase

<table class="@DefaultCssClass"
data-from-component="@nameof(FieldMapperEditor)"
data-component-instance="@InstanceId"
data-mapper-state="@MapperStateId">
    <thead>
        <tr>
            <th>
                Destination
            </th>
            <th>
                Mapping Type
            </th>
            <th>
                Source
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var curField in _editFieldMappings)
        {
            var curMappingRule = curField.MappingRule ?? new IgnoreRule();
            var thisField = curField;
            <tr>
                <td>
                    <div class="field-info-wrapper">
                        <div class="field-name-wrapper">
                            <span class="field-name">@curField.FieldName</span>
                            @if (curField.Required)
                            {
                                <span class="required-field">*</span>
                            }
                        </div>
                        @if (thisField.HasValidationErrors)
                        {
                            var message = thisField.Required && (thisField.MappingRule is null || thisField.MappingRule.SourceFieldTranformations.Count(x => !string.IsNullOrWhiteSpace(x.Field?.FieldName)) == 0)
                                // Special case for required, but no field selected
                                ? "This field requires a source value."
                                : thisField.MappingRule switch
                                {
                                    ConstantValueRule cvr => thisField.GetValidationErrors(cvr.RuleDetail ?? "<null>").First().ErrorMessage,
                                    _ => "The output value for one or more of the source fields is not valid for this field."
                                };
                            <span title="@message">@Icons.Caution()</span>
                        }
                    </div>
                </td>
                <td>
                    <div class="mapping-rule-picker-wrapper">
                        <select class="@DefaultCssClass"
                                @onchange="e => HandleMappingRuleChanged(e, curField)">
                            @foreach (var curMapType in Enum.GetValues<MappingRuleType>())
                            {
                                <option value="@curMapType" selected="@(curField.MappingRuleType == curMapType)">@curMapType.GetDisplayText()</option>
                            }
                        </select>
                        @if (curField.MappingRuleType == MappingRuleType.CombineFieldsRule)
                        {
                            <fieldset class="rule-detail">
                                <legend>
                                    <label for="@($"input_{curField.FieldName}-{InstanceId}")">Rule Detail</label>
                                </legend>
                                <input id="@($"input_{curField.FieldName}-{InstanceId}")"
                                type="div"
                                class="@DefaultCssClass"
                                @bind=curMappingRule.RuleDetail
                                @bind:event="oninput"
                                @bind:after=@(() => NotifyFieldMappingChanged(curField))>
                            </fieldset>
                        }
                    </div>
                </td>
                <td>
                    @switch (curField.MappingRuleType)
                    {
                        case MappingRuleType.CopyRule:
                            {
                                var sourceFieldTransform = curMappingRule.SourceFieldTranformations.FirstOrDefault();
                                @RenderFieldPicker(curField, sourceFieldTransform)
                            }
                            break;
                        case MappingRuleType.CombineFieldsRule:
                            <div class="combine-fields-wrapper">
                                @foreach (var sourceFieldTransform in curMappingRule.SourceFieldTranformations)
                                {
                                    <div class="combined-field">
                                        @RenderFieldPicker(curField, sourceFieldTransform)
                                        @if (curMappingRule.SourceFieldTranformations.Count > 1)
                                        {
                                            <button type="button"
                                            class="o1l-btn-remove o1l-btn-sm@(DefaultCssClass)"
                                            @onclick="_ => HandleRemoveSourceFieldTransformClicked(curField, sourceFieldTransform)">
                                                <div>-</div>
                                            </button>
                                        }
                                    </div>
                                }

                                @if (curMappingRule.SourceFieldTranformations.Count == 0)
                                {
                                    <div class="combined-field">
                                        @RenderFieldPicker(curField, null)
                                    </div>
                                }

                                <button type="button"
                                class="o1l-btn-add o1l-btn-sm@(DefaultCssClass)"
                                @onclick="_ => HandleAddSourceFieldTransformClicked(curField)">
                                    <div>+</div>
                                </button>
                            </div>
                            break;
                        case MappingRuleType.ConstantValueRule:
                            {
                                curField.MappingRule ??= new ConstantValueRule();
                                var mappingRule = curField.MappingRule as ConstantValueRule;
                                <input type="text" @bind=@curField.MappingRule.RuleDetail @bind:event="oninput" @bind:after="() => NotifyFieldMappingChanged(curField)"  />
                            }
                            break;
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

@if (_showConfigureTransform && _editFieldTransformOptions is not null)
{
    <div class="value-config-wrapper@(DefaultCssClass)"
         data-from-component="@nameof(FieldMapperEditor)"
         data-component-instance="@InstanceId"
         data-mapper-state="@MapperStateId">
        <FieldTransformationConfiguration @bind-Show=_showConfigureTransform
                                          FieldMapping=_editFieldTransformOptions.FieldMapping
                                          @bind-FieldTransformation=_editFieldTransformOptions.FieldTransform
                                          @bind-FieldTransformation:after="() => NotifyFieldMappingChanged(_editFieldTransformOptions.FieldMapping)"
                                          ApplyDefaultCss=ApplyDefaultCss />
    </div>
}

@code {
    private RenderFragment RenderFieldPicker(FieldMapping curField, FieldTransformation? sourceFieldTransform = null) => @<div>
        <select class="@DefaultCssClass" @onchange="e => HandleSelectedFieldChanged(e, curField, sourceFieldTransform)">
            <option value="" selected="@(string.IsNullOrWhiteSpace(sourceFieldTransform?.Field?.FieldName))">--Select a field--</option>
            @foreach (var importedField in FieldDescriptors)
        {
            <option value="@importedField.FieldName" selected="@(sourceFieldTransform?.Field?.FieldName == importedField.FieldName)">@importedField.FieldName</option>
        }
        </select>
        @if (sourceFieldTransform is not null)
    {
        <button type="button" class="o1l-btn-edit o1l-btn-sm@(DefaultCssClass)" @onclick="_ => HandleEditTransformClicked(curField, sourceFieldTransform)">
            @Icons.Edit()
        </button>
    }
    </div>;
}