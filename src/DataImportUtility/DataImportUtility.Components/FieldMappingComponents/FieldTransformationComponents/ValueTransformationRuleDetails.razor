@using DataImportUtility.Components.FieldMappingComponents.ValueTransformationComponents
@using DataImportUtility.TransformOperations

@inherits FileImportUtilityComponentBase

<div class="value-tranform-details@(DefaultCssClass)"
     data-from-component="@nameof(FieldTransformationConfiguration)"
     data-component-instance="@InstanceId"
     data-mapper-state="@MapperStateId">
    @switch (ValueTransformation)
    {
        case CombineFieldsOperation combineFieldsOperation:
            @* <CombineFieldsOperationDetails CombineFieldsOperation=combineFieldsOperation /> *@
            <button type="button" class="@DefaultCssClass">
                Configure Fields
            </button>

            <BasicValueTransformationInput ValueTransformation=combineFieldsOperation
                                           Id=_id
                                           ApplyDefaultCss=ApplyDefaultCss
                                           OnAfterInput=HandleOperationDetailChanged />
            break;

        case InterpolateOperation interpolateOperation:
            // If the thing we are doing the interpolation on is a single string, we will only display items relevant to a placeholder for
            // that string.  If it is a list of strings, we will display the list of strings and the placeholder.
            <BasicValueTransformationInput ValueTransformation=interpolateOperation
                                           Id=_id
                                           ApplyDefaultCss=ApplyDefaultCss
                                           OnAfterInput=HandleOperationDetailChanged />
            break;
        case SubstringOperation substringOperation:
            <SubstringValueTransformationInput ValueTransformation=substringOperation
                                               Id=_id
                                               ApplyDefaultCss=ApplyDefaultCss
                                               OnAfterInput=HandleOperationDetailChanged />
            break;
        case RegexMatchOperation regexMatchOperation:
            <BasicValueTransformationInput ValueTransformation=regexMatchOperation
                                           Id=_id
                                           ApplyDefaultCss=ApplyDefaultCss
                                           OnAfterInput=HandleOperationDetailChanged />
            break;

        case MapOperation mapOperation:
            <div class="key-value-pairs">
                <table class="@(DefaultCssClass)">
                    <thead>
                        <tr>
                            <th>From</th>
                            <th>To</th>
                            <th>Actions</th>
                        </tr>
                        <tr>
                            <td>
                                <input type="text" id="key-input" @bind=_inputKey />
                            </td>
                            <td>
                                <input type="text" id="value-input" @bind=_inputValue />
                            </td>
                            <td>
                                <button type="button" class="add-pair" @onclick=AddValueMapping>Add</button>
                            </td>
                        </tr>
                    </thead>
                    <tbody>
                        @if (mapOperation.ValueMappings.Count == 0)
                        {
                            <tr>
                                <td colspan="3">No mappings defined</td>
                            </tr>
                        }
                        @foreach (var kvp in mapOperation.ValueMappings)
                        {
                            <tr>
                                <td>@kvp.FromValue</td>
                                <td>@kvp.ToValue</td>
                                <td>
                                    <button type="button" class="remove-pair" @onclick="_ => RemoveValueMapping(kvp)">Remove</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <fieldset>
                <legend>Options</legend>

                <label for="default-value">Default Value (if not found):</label>
                <input type="text" id="default-value" /> @* @bind-Value="ConfigData.DefaultValue" /> *@

                <div>
                    <input type="checkbox" id="case-sensitive" /> @* @bind-Value="ConfigData.CaseSensitive" /> *@
                    <label for="case-sensitive">Case Sensitive Matching</label>
                </div>

                <div>
                    <input type="checkbox" id="partial-match" /> @* @bind-Value="ConfigData.PartialMatch" /> *@
                    <label for="partial-match">Allow Partial Matching</label>
                </div>
            </fieldset>

            break;
        default:
            <BasicValueTransformationInput ValueTransformation=ValueTransformation
                                           Id=_id
                                           ApplyDefaultCss=ApplyDefaultCss
                                           OnAfterInput=HandleOperationDetailChanged />
            break;
    }
</div>

<table class="@(DefaultCssClass)">
    <thead>
        <tr>
            <th>In Value</th>
            <th>Out Value</th>
            <th>&nbsp;</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>@_myTransformationResult.OriginalValue</td>
            <td>@_myTransformationResult.Value</td>
            <td>
                @if (_myTransformationResult.WasFailure)
                {
                    <span title="@_myTransformationResult.ErrorMessage">@Icons.Caution()</span>
                }
                else
                {
                    <span>&nbsp;</span>
                }
            </td>
        </tr>
    </tbody>
</table>
