@using DataImportUtility.Components.FieldMappingComponents.FieldTransformationComponents
@using DataImportUtility.ValueTransformations

@inherits FileImportUtilityComponentBase

<div class="value-transform-details@(DefaultCssClass)"
     data-from-component="@nameof(FieldTransformationConfiguration)"
     data-component-instance="@InstanceId"
     data-mapper-state="@MapperStateId">
    @switch (ValueTransformation)
    {
        case CombineFieldsTransformation combineFieldsOperation:
            @* <CombineFieldsOperationDetails CombineFieldsOperation=combineFieldsOperation /> *@
            <button type="button" class="@DefaultCssClass">
                Configure Fields
            </button>

            <BasicValueTransformationInput ValueTransformation=combineFieldsOperation
                                           Id=_id
                                           ApplyDefaultCss=ApplyDefaultCss
                                           OnAfterInput=HandleOperationDetailChanged />
            break;
            /*
        case ConditionalTransformation conditionalOperation:
            <ConditionalValueTransformationInput ValueTransformation=conditionalOperation
                                                 Id=_id
                                                 ApplyDefaultCss=ApplyDefaultCss
                                                 OnAfterInput=HandleOperationDetailChanged />
            break;
            */
        case SubstringTransformation substringOperation:
            <SubstringValueTransformationInput ValueTransformation=substringOperation
                                               Id=_id
                                               ApplyDefaultCss=ApplyDefaultCss
                                               OnAfterInput=HandleOperationDetailChanged />
            break;

        case MapTransformation mapOperation:
            <MapTransformationInput ValueTransformation=mapOperation
                                    Id=_id
                                    ApplyDefaultCss=ApplyDefaultCss
                                    OnAfterInput=HandleOperationDetailChanged />

            break;

        case CalculateTransformation calculateOperation:
            <CalculateValueTransformationInput ValueTransformation=calculateOperation
                                               Id=_id
                                               ApplyDefaultCss=ApplyDefaultCss
                                               OnAfterInput=HandleOperationDetailChanged />
            break;
        case RegexMatchTransformation regexMatchOperation:
        case InterpolateTransformation InterpolateTransformation:
        // If the thing we are doing the interpolation on is a single string, we will only display items relevant to a placeholder for
        // that string.  If it is a list of strings, we will display the list of strings and the placeholder.
        default:
            <BasicValueTransformationInput ValueTransformation=ValueTransformation
                                           Id=_id
                                           ApplyDefaultCss=ApplyDefaultCss
                                           OnAfterInput=HandleOperationDetailChanged />
            break;
    }

    <table class="@(DefaultCssClass)">
        <thead>
            <tr>
                <th>In Value</th>
                <th>Out Value</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@(_myTransformationResult.OriginalValue is null ? "<null>" : string.IsNullOrWhiteSpace(_myTransformationResult.OriginalValue) ? "<blank>" : _myTransformationResult.OriginalValue)</td>
                <td>@(_myTransformationResult.Value is null ? "<null>" : string.IsNullOrWhiteSpace(_myTransformationResult.Value) ? "<blank>" : _myTransformationResult.Value)</td>
                <td>
                    @if (_myTransformationResult.WasFailure)
                    {
                        <span title="@_myTransformationResult.ErrorMessage">@Icons.Caution()</span>
                    }
                    else
                    {
                        <span>&nbsp;</span>
                    }
                </td>
            </tr>
        </tbody>
    </table>
</div>

